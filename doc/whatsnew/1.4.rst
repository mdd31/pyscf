***************************
  What's New in PySCF 1.4
***************************

This article explains new features in PySCF 1.4.


Relase highlights
=================

New features:

* Spinor-GTO evaluator
* Dirac-Kohn-Sham (LDA functional)
* EDIIS and ADIIS
* Periodic CCSD with k-point sampling
* Periodic EOM-IP-CCSD and EOM-EA-CCSD for single k-point calculation
* spin-square value (per unit) of KUHF calculation
* Update interface to fciqmc for standalone executing
* Routines in fciqmc to read in the spinned one and two RDMs
* Heat-Bath CI
* Functions in dmrgci interface to access 3-pdm and 4-pdm
* Function get_fermi
* UCCSD lambda equation and 1,2-particle density matrix
* SCF wfn stability analysis
* Many-Body van der Waals Interactions (MBD)
* Second order SCF solver for periodic HF and DFT
* TDDFT for periodic k-point HF and DFT
* U-TDHF and U-TDDFT for molecular and crystal systems
* Many-body dispersion
* MP2-F12 and F12 basis and F12 RI basis
* Cartesian GTO (6d 10f) basis in molecular calculations
* CP2K's HF pseudopotentials
* Frozen core MP2
* Molecular electrostatic potential (MEP)
* CPHF and UCPHF solver
* Non-relativistic RHF, UHF 4-component UHF spin-spin coupling

Improvements:

* Performance of PBC-Gaussian function evaluator
* Performance of analytical Fourier transformation for AO product
* Performance of PBC 3-center integrals
* Performance of PBC PP local-part integrals
* Numerical stability associated to OpenMP reduce function
* Performance of FCI 2-electron contraction function
* Basis parser for Pople style basis sets
* Arbitrary problem size in FCI solver
* Symmetry labels in orbital coefficients
* Disk usage of integral transformation in MP2
* Performance of J/K contractions in molecular density fitting code
* Input gemoertry parser for ghost atoms


API changes
===========

* numint.non0tab -> grids.non0tab.



Features
========


Heat-bath Selected CI
---------------------


UCCSD density matrices
----------------------
Alpha-alpha and beta-beta blocks of one-particle density matrices.
Spin-orbital two-particle density matrices can be computed.


SCF wavefunction stability analysis
-----------------------------------
Call ``mf.stability()`` for stability analysis.  For RHF, the stability
check the transformations from real to complex and RHF to UHF.  For UHF, the
stability analysis involves the real to complex and UHF to GHF transformation.


Second order SCF solver for PBC systems
---------------------------------------
``pbc.scf.newton`` method should be used for k-point PBC SCF calculations.


TDHF and TDDFT for PBC systems
------------------------------
High energy cutoff for FFT should be used.  DF and MDF methods work better.


Cartesian GTO (6d 10f) basis in molecular calculations
------------------------------------------------------
``mol.cart = True`` to switch on cartesian GTO basis.  AO is not normalized.



Improvements
============

Performance of PBC calculations
-------------------------------
Performance of PBC analytical Fourier transform, PBC 3-center integrals, and PBC
PP local-part integrals are optimized.  They dramatically improve the
performance of the PBC calculations.  More specifically, the initialization step
of DF and MDF method is 5 - 100 times faster than the DF/MDF code in PySCF-1.3.
The analytical Fourier transform is 1.5 - 5 times faster than the old
implementations.


Basis parser for Pople style basis sets
---------------------------------------
In PySCF-1.3, Pople basis was not parsed following Gaussian's convention,
especially the polarized functions in hydrogen basis.  Polarized functins were
assigned to hydrogen atom for 6-31G* basis and 6-311G* basis.  In PySCF-1.4,
this problem has been corrected.  More polarization functions and diffuse
functions were also added in the new release.  Basis input such as "6-31g(d,p)",
"6-311++g" are all supported in the basis parser.

.. note:: Even the system has only Poply basis, cartesian (6d,10f) GTO is not
    enabled by default.  You should specify mol.cart = True to explicitly switch
    to cartensian GTO calculations.

Problem size in FCI solver
--------------------------
Support more than 64 orbitals in the FCI solver.


Ghost atoms in geometry parser
------------------------------
In PySCF-1.3 and older version, ghost atom is treated as a special element like
all other elements.  To distinguish different types of ghost atoms in the
system, suffix or prefix need to be assigned to the ghost atoms and the relevant
basis sets need to be explicitly created::

    mol.atom='''
    ghost1     0.000000000     0.000000000     2.500000000
    ghost2    -0.663641000    -0.383071000     3.095377000
    ghost2     0.663588000     0.383072000     3.095377000
    O     1.000000000     0.000000000     2.500000000
    H    -1.663641000    -0.383071000     3.095377000
    H     1.663588000     0.383072000     3.095377000
    '''
    mol.basis={'ghost1':gto.basis.load('sto3g', 'O'),
               'ghost2':gto.basis.load('631g', 'H'),
               'O':'sto3g', 'H':'631g'}

This input is inconvenient when the system contains multiple types of ghost
atoms as the example above.  PySCF-1.4 added a new prefix keyword "ghost" in the
geometry section to specialize the ghost atoms.  When an element is prefixed by
"ghost", a ghost atom will be placed at the position of the element and the
basis set of the element will be assigned to the ghost atom::

    mol.atom='''
    ghost_O     0.000000000     0.000000000     2.500000000
    ghost_H    -0.663641000    -0.383071000     3.095377000
    ghost_H     0.663588000     0.383072000     3.095377000
    O     1.000000000     0.000000000     2.500000000
    H    -1.663641000    -0.383071000     3.095377000
    H     1.663588000     0.383072000     3.095377000
    '''
    mol.basis={'O':'sto3g', 'H':'631g'}

This input will create exactly the same system as the one before.  The STO-3G
basis of oxygen atom will be assigned to ``ghost_O`` atom and 6-31G basis of
hydrogen will be assigned to ``ghost_H`` atom.  See more examples in
examples/gto/03-ghost_atom.py.

